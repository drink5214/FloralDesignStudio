//
//  ContentView.swift
//  FloralDesignStudio
//
//  Created by Jeff Drinkard on 11/26/24.
//

import SwiftUI

struct ContentView: View {
    @StateObject private var viewModel = FloralDesignViewModel()
    
    var body: some View {
        Group {
            if viewModel.isAuthenticated {
                MainView()
                    .environmentObject(viewModel)
            } else {
                LoginView()
                    .environmentObject(viewModel)
            }
        }
    }
}

struct DashboardView: View {
    @ObservedObject var viewModel: FloralDesignViewModel
    @State private var showingNewDesign = false
    
    var body: some View {
        VStack {
            HStack {
                Text("My Designs")
                    .font(.title2)
                    .foregroundColor(.green)
                
                Spacer()
                
                if viewModel.currentUser != nil && viewModel.currentUser!.canUpload {
                    Button(action: {
                        showingNewDesign = true
                    }) {
                        Image(systemName: "plus.circle.fill")
                            .resizable()
                            .frame(width: 24, height: 24)
                            .foregroundColor(.green)
                    }
                }
            }
            .padding()
            
            ScrollView {
                LazyVStack(spacing: 16) {
                    ForEach(viewModel.designs) { design in
                        DesignCard(design: design)
                    }
                }
                .padding()
            }
        }
        .sheet(isPresented: $showingNewDesign) {
            NewDesignView(viewModel: viewModel)
        }
    }
}

struct DesignCard: View {
    let design: FloralDesign
    
    var body: some View {
        VStack(alignment: .leading, spacing: 8) {
            Text(design.title)
                .font(.headline)
            Text(design.description)
                .font(.subheadline)
                .foregroundColor(.gray)
            Text("$\(String(format: "%.2f", design.price))")
                .font(.caption)
                .foregroundColor(.green)
        }
        .padding()
        .frame(maxWidth: .infinity, alignment: .leading)
        .background(Color.white)
        .cornerRadius(10)
        .shadow(radius: 2)
    }
}

struct NewDesignView: View {
    @ObservedObject var viewModel: FloralDesignViewModel
    @Environment(\.dismiss) var dismiss
    
    @State private var title = ""
    @State private var description = ""
    @State private var price = ""
    
    var body: some View {
        NavigationView {
            Form {
                TextField("Title", text: $title)
                TextField("Description", text: $description)
                TextField("Price", text: $price)
                    .keyboardType(.decimalPad)
            }
            .navigationTitle("New Design")
            .navigationBarItems(
                leading: Button("Cancel") {
                    dismiss()
                },
                trailing: Button("Save") {
                    if let priceValue = Double(price) {
                        viewModel.createDesign(
                            title: title,
                            description: description,
                            price: priceValue
                        )
                        dismiss()
                    }
                }
            )
        }
    }
}

struct MainView: View {
    @EnvironmentObject var viewModel: FloralDesignViewModel
    
    var body: some View {
        NavigationView {
            ZStack {
                // Background color
                Color(white: 0.98)
                    .ignoresSafeArea()
                
                VStack(spacing: 20) {
                    Text("Floral Design Studio")
                        .font(.system(size: 32, weight: .bold))
                        .foregroundColor(floralGreen)
                        .padding(.top, 20)
                    
                    DashboardView(viewModel: viewModel)
                }
            }
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Logout") {
                        viewModel.logout()
                    }
                    .foregroundColor(floralGreen)
                }
            }
        }
    }
}

struct LoginView: View {
    @ObservedObject var viewModel: FloralDesignViewModel
    
    var body: some View {
        Text("Login View")
    }
}

struct MenuButton: View {
    let title: String
    let icon: String
    var action: (() -> Void)? = nil
    
    var body: some View {
        Button(action: {
            action?()
        }) {
            VStack {
                Image(systemName: icon)
                    .font(.system(size: 30))
                Text(title)
                    .font(.headline)
            }
            .frame(maxWidth: .infinity)
            .padding()
            .background(Color.white)
            .cornerRadius(10)
            .shadow(radius: 2)
        }
        .foregroundColor(floralGreen)
    }
}

// Custom colors
let floralGreen = Color(red: 34/255, green: 139/255, blue: 34/255)

// Custom button style for green buttons
struct GreenButtonStyle: ButtonStyle {
    func makeBody(configuration: Configuration) -> some View {
        configuration.label
            .padding()
            .background(
                Color(red: 34/255, green: 139/255, blue: 34/255)
                    .shadow(radius: 3)
            )
            .foregroundColor(.white)
            .clipShape(RoundedRectangle(cornerRadius: 10))
            .scaleEffect(configuration.isPressed ? 0.95 : 1)
    }
}

// Custom circular button for upload
struct UploadButton: View {
    let action: () -> Void
    
    var body: some View {
        Button(action: action) {
            Image(systemName: "plus")
                .foregroundColor(.white)
                .padding(8)
                .background(
                    Circle()
                        .fill(Color(red: 34/255, green: 139/255, blue: 34/255))
                        .shadow(radius: 3)
                )
        }
    }
}

// Custom circular button for delete
struct DeleteButton: View {
    let action: () -> Void
    
    var body: some View {
        Button(action: action) {
            Image(systemName: "xmark")
                .foregroundColor(.white)
                .padding(8)
                .background(
                    Circle()
                        .fill(Color.red)
                        .shadow(radius: 3)
                )
        }
    }
}

struct CustomTextFieldStyle: TextFieldStyle {
    func _body(configuration: TextField<Self._Label>) -> some View {
        configuration
            .padding()
            .background(
                RoundedRectangle(cornerRadius: 8)
                    .fill(Color.white.opacity(0.9))
                    .overlay(
                        RoundedRectangle(cornerRadius: 8)
                            .stroke(Color.green, lineWidth: 1)
                    )
            )
            .foregroundColor(.green)
    }
}

#Preview {
    ContentView()
}
